package PenTest;

import java.util.ArrayList;
import java.util.HashMap;

public class PenTest {

	static String urlString;

	public static void main(String[] args) {

		if((args == null || args.length == 0))
		{
			urlString = "http://theatmojo.com";			
		}
		else
		{
			urlString = args[0];			
		}

		Integer	 i = 0;

		for(i = 0; i < 1; i++)
		{
			System.out.println("attempt " + i);

			/*	define the output directory	*/
			String outputDir = "output/"+urlString.replaceAll("[:\\/]+", "-");

			/*	create the output directory	*/
			FileInterface.createDir(outputDir);

			/*	identify the host ip address	*/
			String ipAddress = HostIdentifier.getIpAddress(urlString);
			FileInterface.writeTimestamp(outputDir+"/"+"output.log", "ipAddress: "+ ipAddress);	

			/*	identify the hostname	*/
			String hostname = HostIdentifier.getHostname(ipAddress);
			FileInterface.writeTimestamp(outputDir+"/"+"output.log", "hostname: "+ hostname);	

			/*	identify the ftp banner	*/
			String ftpBanner = HostIdentifier.getFtpBanner(ipAddress);
			FileInterface.writeTimestamp(outputDir+"/"+"output.log", "ftpBanner: "+ ftpBanner);	

			/*	identify the robots txt	*/
			String robotsContent = HostIdentifier.getRobots(urlString);
			FileInterface.write(outputDir+"/"+"robots.txt", robotsContent);

			/*	identify the readme	*/
			String readmeContent = WordPressProfiler.getReadme(urlString);
			FileInterface.write(outputDir+"/"+"readme.html", readmeContent);

			/*	identify the license	*/
			String licenseContent = WordPressProfiler.getLicense(urlString);
			FileInterface.write(outputDir+"/"+"license.txt", licenseContent);

			HashMap<String, Object> fetchResult = UrlFetch.get(urlString);

			/*	identify the server technology	*/
			String server = HeaderCrawler.getServer((HashMap<String, Object>) fetchResult.get("header"));
			FileInterface.writeTimestamp(outputDir+"/"+"output.log", "server: "+ server);	

			String content = (String) fetchResult.get("content");

			ArrayList<String> output = ContentFinder.findUrl(content);
			for (int j = 0; j < output.size(); j++) {
				FileInterface.writeTimestamp(outputDir+"/"+"url.log", "url: "+output.get(j));
			}

			output = ContentFinder.findScript(content);

			for (int j = 0; j < output.size(); j++) {

				FileInterface.writeTimestamp(outputDir+"/"+"script.log", "script: "+output.get(j));

				HashMap<String, Object> scriptFetch = UrlFetch.get(output.get(j));

				String scriptContent = (String) scriptFetch.get("content"); 

				ArrayList<String> scriptComment = ContentFinder.findComment(scriptContent);


				for(int k = 0; k < scriptComment.size(); k++)
				{
					FileInterface.writeTimestamp(outputDir+"/"+"script-comment.log", "scriptComment: "+scriptComment.get(k));
				}

			}

			output = ContentFinder.findStyle(content);

			for (int j = 0; j < output.size(); j++) {
				FileInterface.writeTimestamp(outputDir+"/"+"style.log", "style: "+output.get(j));

				HashMap<String, Object> styleFetch = UrlFetch.get(output.get(j));

				String styleContent = (String) styleFetch.get("content"); 

				ArrayList<String> styleComment = ContentFinder.findComment(styleContent);


				for(int k = 0; k < styleComment.size(); k++)
				{
					FileInterface.writeTimestamp(outputDir+"/"+"style-comment.log", "styleComment: "+styleComment.get(k));
				}

			}

			output = ContentFinder.findMeta(content);

			for (int j = 0; j < output.size(); j++) {
				FileInterface.writeTimestamp(outputDir+"/"+"meta.log", "meta: "+output.get(j));
			}			

			output = ContentFinder.findImage(content);

			for (int j = 0; j < output.size(); j++) {
				FileInterface.writeTimestamp(outputDir+"/"+"image.log", "image: "+output.get(j));
			}

			output = ContentFinder.findComment(content);

			for (int j = 0; j < output.size(); j++) {
				FileInterface.writeTimestamp(outputDir+"/"+"comment.log", "comment: "+output.get(j));
			}

			output = ContentFinder.findHtmlComment(content);

			for (int j = 0; j < output.size(); j++) {
				FileInterface.writeTimestamp(outputDir+"/"+"html-comment.log", "htmlComment: "+output.get(j));
			}
		}

	}

}
