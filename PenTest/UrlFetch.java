package PenTest;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UrlFetch {

	public String content = "";
	public HashMap<String, Object> header = null;

	static HashMap<String, Object> get(String urlString)
	{
		HashMap<String, Object> result = new HashMap<String, Object>();

		UrlFetch urlFetch = new UrlFetch();

		/*	get the url	*/
		URLConnection urlConn = urlFetch.getUrl(urlString);

		/*	get the content	*/
		String content = urlFetch.getContent(urlConn);
		result.put("content", content);

		/*	get the header	*/
		HashMap<String, Object> header = urlFetch.getHeader(urlConn);
		result.put("header", header);

		return result;		
	}

	public URLConnection getUrl(String urlString)
	{
		URL url = null;

		try {

			/*	sanitize the target url first	*/
			urlString = UrlFetch.sanitizeUrl(urlString);

			url = new URL(urlString);
		} catch (MalformedURLException e) {
			e.printStackTrace(); 
		}

		URLConnection urlConn = null;
		try {
			urlConn = url.openConnection();
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		/*	add the user agent to the request	*/
		urlConn.addRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36");

		return urlConn;
	}

	public String getContent(URLConnection urlConn)
	{
		/*	get the URL Connection content	*/
		String output = "";

		/*	get the url content	*/
		try (BufferedReader reader = new BufferedReader(new InputStreamReader(urlConn.getInputStream(), "UTF-8"))) {

			/*	read all line within the response	*/
			for (String line; (line = reader.readLine()) != null;) {
				output += line;
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return output;
	}

	public HashMap<String, Object> getHeader(URLConnection urlConn)
	{
		/*	get the header information	*/
		HashMap<String, Object> output = new HashMap<String, Object>();

		Map<String, List<String>> headerFields = urlConn.getHeaderFields();

		for(Map.Entry<String,List<String>> entry : headerFields.entrySet())
		{
			output.put(entry.getKey(), entry.getValue());
		}

		return output;
	}

	static String sanitizeUrl(String urlString)
	{

		/*	pattern to check for URL without protocol	*/
		String r1 = "^//.+?";
		/*	pattern to check for URL started with "."	*/
		String r2 = "^\\.[^\\.]+?.+$";
		/*	correct pattern for URL	*/
		String r3 = "^/.+?";
		/*	URL with iterative	*/
		String r4 = "^\\.\\..+?";
		/*	correct pattern for URL	*/
		String r5 = "^http(s)*://.+?$";
		/*	URL with domain name	*/
		String r6 = "^[^\\.\\s/]+?\\.[^\\.\\s/].+?$";

		if(urlString.matches(r1))
		{
			urlString = "http:" + urlString;
		}
		else if(urlString.matches(r2))
		{
			urlString = "http://" + urlString.replaceAll("^(\\.)", "");
		}
		else if(urlString.matches(r3))
		{
			urlString = PenTest.urlString + urlString;
		}
		else if(urlString.matches(r4))
		{
			urlString = PenTest.urlString + "/" + urlString;
		}
		else if(urlString.matches(r5))
		{

		}		
		else if(urlString.matches(r6))
		{
			urlString = "http://" + urlString;
		}			
		else
		{
			urlString = PenTest.urlString + urlString;
		}

		System.out.println("Fetch: " + urlString);
		return urlString;

	}

}
