package PenTest;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Properties;

public class PenTest {

	static String urlString;

	public static void main(String[] args) {

		PropLoader propLoader = new PropLoader();
		Properties config = propLoader.getPropValues("config");
		Properties scanConfig = propLoader.getPropValues("scan");

		if((args == null || args.length == 0))
		{
			urlString = config.getProperty("target");	
		}
		else
		{
			urlString = args[0];			
		}

		/*	create the log dir	*/
		FileInterface.createDir(config.getProperty("logFolder"));

		/*	create the config dir	*/
		FileInterface.createDir(config.getProperty("configFolder"));



		/*	define the output directory	*/
		String dateTime = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
		String outputDir = config.getProperty("outputFolder")+"/"+urlString.replaceAll("[:\\/]+", "-") + "/"+ dateTime;

		/*	create the output directory	*/
		FileInterface.createDir(outputDir);


		/*	identify the reverse domain address	*/
		if(Boolean.parseBoolean(scanConfig.getProperty("reverseDomain")) == true)
		{
			Helper.show("# Reverse Domain Check Started");

			ArrayList<String> domain = DomainReverse.getData(urlString);

			for(int x = 0; x < domain.size(); x++)
			{
				FileInterface.write(outputDir+"/"+"domain-reverse.list", domain.get(x));	

			}

			Helper.show("# Reverse Domain Check Completed");
		}

		/*	identify the host ip address	*/
		String ipAddress = "127.0.0.1";

		if(Boolean.parseBoolean(scanConfig.getProperty("ipAddress")) == true)
		{
			Helper.show("# IP Address Check Started");
			ipAddress = HostIdentifier.getIpAddress(urlString);
			FileInterface.writeTimestamp(outputDir+"/"+"output.log", "ipAddress: "+ ipAddress);	
			Helper.show("# IP Address Check Completed");
		}

		/*	identify the hostname	*/
		if(Boolean.parseBoolean(scanConfig.getProperty("hostname")) == true)
		{
			Helper.show("# Hostname Check Started");
			String hostname = HostIdentifier.getHostname(ipAddress);
			FileInterface.writeTimestamp(outputDir+"/"+"output.log", "hostname: "+ hostname);	
			Helper.show("# Hostname Check Completed");
		}

		/*	identify the open port	*/
		if(Boolean.parseBoolean(scanConfig.getProperty("port")) == true)
		{
			Helper.show("# Port Scan Started");
			HashMap<Integer, Boolean> portScanResult = NetworkTool.scanPortBulk(ipAddress);

			for (HashMap.Entry<Integer, Boolean> entry : portScanResult.entrySet()) {
				Integer key = entry.getKey();
				Boolean value = entry.getValue();

				if(value.equals(false))
				{
					continue;
				}

				FileInterface.write(outputDir+"/"+"port.list", key + " " + value);	
			}
			Helper.show("# Port Scan Completed");
		}


		/*	identify the ftp banner	*/
		if(Boolean.parseBoolean(scanConfig.getProperty("ftpBanner")) == true)
		{
			Helper.show("# FTP Banner Check Started");		
			String ftpBanner = HostIdentifier.getFtpBanner(ipAddress);
			FileInterface.writeTimestamp(outputDir+"/"+"output.log", "ftpBanner: "+ ftpBanner);	
			Helper.show("# FTP Banner Check Completed");		
		}

		/*	identify the robots txt	*/
		if(Boolean.parseBoolean(scanConfig.getProperty("robots")) == true)
		{
			Helper.show("# Robots File Check Started");	
			String robotsContent = HostIdentifier.getRobots(urlString);
			FileInterface.write(outputDir+"/"+"robots.txt", robotsContent);
			Helper.show("# Robots File Check Completed");	
		}

		/*	identify the readme	*/
		if(Boolean.parseBoolean(scanConfig.getProperty("wordPressReadme")) == true)
		{
			Helper.show("# WordPress Readme Check Started");	
			String readmeContent = WordPressProfiler.getReadme(urlString);
			FileInterface.write(outputDir+"/"+"readme.html", readmeContent);
			Helper.show("# WordPress Readme Check Completed");	
		}

		/*	identify the license	*/
		if(Boolean.parseBoolean(scanConfig.getProperty("wordPressLicense")) == true)
		{
			Helper.show("# WordPress License Check Started");	
			String licenseContent = WordPressProfiler.getLicense(urlString);
			FileInterface.write(outputDir+"/"+"license.txt", licenseContent);
			Helper.show("# WordPress License Check Completed");	
		}

		HashMap<String, Object> fetchResult = UrlFetch.get(urlString);
		String content = (String) fetchResult.get("content");


		/*	identify the server technology	*/
		if(Boolean.parseBoolean(scanConfig.getProperty("server")) == true)
		{
			Helper.show("# Server Check Started");	
			@SuppressWarnings("unchecked")
			String server = HeaderCrawler.getServer((HashMap<String, Object>) fetchResult.get("header"));
			FileInterface.writeTimestamp(outputDir+"/"+"output.log", "server: "+ server);	
			Helper.show("# Server Check Completed");
		}

		/*	get all url within page	*/
		if(Boolean.parseBoolean(scanConfig.getProperty("urlCrawler")) == true)
		{
			Helper.show("# URL Check Started");	

			ArrayList<String> output = ContentFinder.findUrl(content);

			output = Helper.getUniqueList(output);

			for (int j = 0; j < output.size(); j++) {
				FileInterface.write(outputDir+"/"+"url.list", output.get(j));
			}
			Helper.show("# URL Check Completed");	
		}

		/*	get all script within page	*/

		ArrayList<String> scriptOutput = new ArrayList<String>();
		if(Boolean.parseBoolean(scanConfig.getProperty("scriptCrawler")) == true)
		{
			Helper.show("# Script Check Started");	

			scriptOutput = ContentFinder.findScript(content);

			scriptOutput = Helper.getUniqueList(scriptOutput);

			for (int j = 0; j < scriptOutput.size(); j++) {

				FileInterface.write(outputDir+"/"+"script.list",scriptOutput.get(j));

				HashMap<String, Object> scriptFetch = UrlFetch.get(scriptOutput.get(j), urlString);

				String scriptContent = (String) scriptFetch.get("content"); 

				ArrayList<String> scriptComment = ContentFinder.findComment(scriptContent);


				for(int k = 0; k < scriptComment.size(); k++)
				{
					FileInterface.write(outputDir+"/"+"script-comment.list", scriptComment.get(k));
				}

			}
			Helper.show("# Script Check Completed");	
		}

		/*	start web iterator	*/
		Helper.show("# Web Iterator Check Started");	
		WebIterator.logFolder = outputDir;
		WebIterator.runThread(urlString, scriptOutput, 3);
		Helper.show("# Web Iterator Check Completed");	

		/*	start inline script finder	*/
		Helper.show("# Inline Script Check Started");	
		ArrayList<String> inlineScript = ContentFinder.findInlineScript(content);

		for(int k = 0; k < inlineScript.size(); k++)
		{
			FileInterface.write(outputDir+"/"+"inline-script-"+ k +".log", inlineScript.get(k));
		}
		Helper.show("# Inline Script Check Completed");	


		/*	get all style within page	*/
		if(Boolean.parseBoolean(scanConfig.getProperty("styleCrawler")) == true)
		{
			Helper.show("# Style Check Started");	
			ArrayList<String> output = ContentFinder.findStyle(content);

			output = Helper.getUniqueList(output);

			for (int j = 0; j < output.size(); j++) {
				FileInterface.write(outputDir+"/"+"style.list", output.get(j));

				HashMap<String, Object> styleFetch = UrlFetch.get(output.get(j), urlString);

				String styleContent = (String) styleFetch.get("content"); 

				ArrayList<String> styleComment = ContentFinder.findComment(styleContent);

				for(int k = 0; k < styleComment.size(); k++)
				{
					FileInterface.write(outputDir+"/"+"style-comment.list", styleComment.get(k));
				}

			}
			Helper.show("# Style Check Completed");	

		}

		/*	start inline script finder	*/
		Helper.show("# Inline Style Check Started");	
		ArrayList<String> inlineStyle = ContentFinder.findInlineStyle(content);

		for(int k = 0; k < inlineStyle.size(); k++)
		{
			FileInterface.write(outputDir+"/"+"inline-style-"+ k +".log", inlineStyle.get(k));
		}
		Helper.show("# Inline Script Check Completed");	

		/*	get all meta within page	*/
		if(Boolean.parseBoolean(scanConfig.getProperty("metaCrawler")) == true)
		{
			Helper.show("# Meta Check Started");	
			ArrayList<String> output = ContentFinder.findMeta(content);

			output = Helper.getUniqueList(output);


			for (int j = 0; j < output.size(); j++) {
				FileInterface.write(outputDir+"/"+"meta.list", output.get(j));
			}			
			Helper.show("# Meta Check Completed");	
		}

		/*	get all image within page	*/
		if(Boolean.parseBoolean(scanConfig.getProperty("imageCrawler")) == true)
		{
			Helper.show("# Image Check Started");	
			ArrayList<String> output = ContentFinder.findImage(content);

			output = Helper.getUniqueList(output);

			for (int j = 0; j < output.size(); j++) {
				FileInterface.write(outputDir+"/"+"image.list", output.get(j));
			}
			Helper.show("# Image Check Completed");	
		}

		ArrayList<String> output;
		/*	get all comment within page	*/
		if(Boolean.parseBoolean(scanConfig.getProperty("commentCrawler")) == true)
		{
			Helper.show("# Comment Check Started");	
			output = ContentFinder.findComment(content);

			output = Helper.getUniqueList(output);

			for (int j = 0; j < output.size(); j++) {
				FileInterface.write(outputDir+"/"+"comment.list", output.get(j));
			}
			Helper.show("# Comment Check Completed");	
		}

		/*	get all HTML Comment within page	*/
		if(Boolean.parseBoolean(scanConfig.getProperty("htmlCommentCrawler")) == true)
		{
			Helper.show("# HTML Comment Check Started");	
			output = ContentFinder.findHtmlComment(content);

			output = Helper.getUniqueList(output);

			for (int j = 0; j < output.size(); j++) {
				FileInterface.write(outputDir+"/"+"html-comment.list", output.get(j));
			}
			Helper.show("# HTML Comment Check Completed");	
		}
	}

}
