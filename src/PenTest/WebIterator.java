package PenTest;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.HashMap;

public class WebIterator {

	static HashMap<String, String> urlList = new HashMap<String, String>();
	static ArrayList<String> urlArray = new ArrayList<String>();
	static String parentUrl = "";
	static String logFolder = "resources/output";

	static void run(String parentUrl, ArrayList<String> url)
	{
		for(int i = 0; i < url.size(); i++)
		{
			check(parentUrl, url.get(i));
		}

	}

	static void runThread(String parentUrl, ArrayList<String> url, int threadNumber)
	{
		urlArray = url;
		WebIterator.parentUrl = parentUrl;

		ArrayList<WebIteratorThread> threadList = new ArrayList<WebIteratorThread>();

		for (int i = 1; i <= threadNumber; i++)
		{
			threadList.add(new WebIteratorThread("WebIteratorThread-"+String.valueOf(i)));
		}

		for (int i = 0; i < threadNumber; i++)
		{
			threadList.get(i).start();	
		}

		for (int i = 0; i < threadNumber; i++)
		{
			try {
				threadList.get(i).join();
			} catch (InterruptedException e) {
				ErrorHandler.write(e);
			}	
		}
	}

	static synchronized void write(String url, String status)
	{
		FileInterface.write(logFolder + "/web-iterator.list", status + " " + url);
	}

	static synchronized String urlFetch()
	{
		String urlSingle = "";
		if(urlArray.size() > 0)
		{
			urlSingle = urlArray.get(0);
			urlArray.remove(0);		
		}

		return urlSingle;
	}

	static void check(String parentUrl, String url)
	{
		String completeUrl = Helper.sanitizeUrl(url, parentUrl);

		/*	check first if url has been checked previously	*/
		if(isNewUrl(completeUrl))
		{
			/*	fetch the target url	*/
			HashMap<String, Object>  urlResult = UrlFetch.get(completeUrl);

			String status = String.valueOf(urlResult.get("responseCode"));

			write(completeUrl, status);

			String nextUrl = Helper.sanitizeUrl(url.replaceFirst("/[^/]+?$", "").replaceAll("\\s+",""));

			parentUrl = Helper.sanitizeUrl(parentUrl);

			if(!parentUrl.equals(nextUrl) && nextUrl.contains(parentUrl))
			{
				check(parentUrl, nextUrl);
			}
		}
	}

	static synchronized Boolean isNewUrl(String url)
	{
		Boolean status = false;

		if(urlList.containsKey(getHash(url)))
		{
			status = false;
		}
		else
		{
			addUrl(url);
			status = true;
		}

		return status;
	}

	static synchronized void addUrl(String url)
	{
		urlList.put(getHash(url), url);
	}

	static String getHash(String content)
	{
		byte[] contentBytes = null;
		contentBytes = content.getBytes();

		MessageDigest md = null;
		try {
			md = MessageDigest.getInstance("MD5");
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		byte[] hashBytes = md.digest(contentBytes);

		StringBuffer stringBuffer = new StringBuffer();
		for (int i = 0; i < hashBytes.length; i++) {
			stringBuffer.append(Integer.toString((hashBytes[i] & 0xff) + 0x100, 16)
					.substring(1));
		}

		return stringBuffer.toString();
	}
}

class WebIteratorThread extends Thread {
	private Thread t;
	private String threadName;

	WebIteratorThread( String name){
		threadName = name;
		System.out.println("Creating " +  threadName );
	}

	public void run() {
		String url;
		while(!(url = WebIterator.urlFetch()).equals(""))
		{
			WebIterator.check(WebIterator.parentUrl, url);
		}
	}

	public void start ()
	{
		System.out.println("Starting " +  threadName );
		if (t == null)
		{
			t = new Thread (this, threadName);
			t.start ();
		}
	}

}
