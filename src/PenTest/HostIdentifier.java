package PenTest;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.MalformedURLException;
import java.net.Socket;
import java.net.URL;
import java.net.UnknownHostException;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;

public class HostIdentifier {

	static String getIpAddress(String urlString)
	{

		/*	return the IP Address of the given url string	*/
		InetAddress address = null;
		try {
			address = InetAddress.getByName(new URL(urlString).getHost());
		} catch (UnknownHostException e) {
			ErrorHandler.write(e);
		} catch (MalformedURLException e) {
			ErrorHandler.write(e);
		}

		return address.getHostAddress();
	}

	static String getHostname(String ipAddress)
	{
		/*	get the hostname of given ip address	*/
		String retVal = null;
		final String[] bytes = ipAddress.split("\\.");
		if (bytes.length == 4)
		{
			try
			{
				final java.util.Hashtable<String, String> env = new java.util.Hashtable<String, String>();
				env.put("java.naming.factory.initial", "com.sun.jndi.dns.DnsContextFactory");
				final javax.naming.directory.DirContext ctx = new javax.naming.directory.InitialDirContext(env);
				final String reverseDnsDomain = bytes[3] + "." + bytes[2] + "." + bytes[1] + "." + bytes[0] + ".in-addr.arpa";
				final javax.naming.directory.Attributes attrs = ctx.getAttributes(reverseDnsDomain, new String[]
						{
								"PTR",
						});
				for (final javax.naming.NamingEnumeration<? extends javax.naming.directory.Attribute> ae = attrs.getAll(); ae.hasMoreElements();)
				{
					final javax.naming.directory.Attribute attr = ae.next();
					final String attrId = attr.getID();
					for (final java.util.Enumeration<?> vals = attr.getAll(); vals.hasMoreElements();)
					{
						String value = vals.nextElement().toString();

						if ("PTR".equals(attrId))
						{
							final int len = value.length();
							if (value.charAt(len - 1) == '.')
							{
								value = value.substring(0, len - 1);
							}
							retVal = value;
						}
					}
				}
				ctx.close();
			}
			catch (final javax.naming.NamingException e)
			{
				// No reverse DNS that we could find, try with InetAddress
			}
		}

		if (null == retVal)
		{
			try
			{
				retVal = java.net.InetAddress.getByName(ipAddress).getCanonicalHostName();
			}
			catch (final java.net.UnknownHostException e1)
			{
				retVal = ipAddress;
			}
		}

		return retVal;
	}

	static String getFtpBanner(String ipAddress)
	{
		Socket socket = null;
		try {
			socket = new Socket();
			socket.connect(new InetSocketAddress(ipAddress, 21), 1000);
		} catch (Exception e) {
			ErrorHandler.write(e);
		} 

		BufferedReader r = null;

		String banner = "";

		try {
			r = new BufferedReader(new InputStreamReader(socket.getInputStream()));
		} catch (IOException e) {
			ErrorHandler.write(e);
		}

		String line = null;

		try {
			while ((line = r.readLine()) != null && r.ready()) {
				banner += line;
				line = null;
			}

		} catch (IOException e) {
			ErrorHandler.write(e);
		}

		try {
			socket.close();
		} catch (IOException e) {
			ErrorHandler.write(e);
		}
		return banner;
	}

	static String getSshBanner(String ipAddress)
	{
		String user = "";
		String password = "";
		String host = ipAddress;
		Integer port = 22;
		String remoteFile = "";
		String line = null;

		try
		{
			JSch jsch = new JSch();
			Session session = jsch.getSession(user, host, port);
			session.setPassword(password);
			session.setConfig("StrictHostKeyChecking", "no");
			System.out.println("Establishing Connection...");
			session.connect();
			System.out.println("Connection established.");
			System.out.println("Crating SFTP Channel.");
			ChannelSftp sftpChannel = (ChannelSftp) session.openChannel("sftp");
			sftpChannel.connect();
			System.out.println("SFTP Channel created.");


			InputStream out= null;
			out= sftpChannel.get(remoteFile);
			BufferedReader br = new BufferedReader(new InputStreamReader(out));
			while ((line = br.readLine()) != null)
				System.out.println(line);
			br.close();
		}
		catch(Exception e){			
			ErrorHandler.write(e);
		}

		return line;
	}

	static String getRobots(String urlString)
	{
		UrlFetch urlFetch = new UrlFetch();
		HttpURLConnection urlConn = (HttpURLConnection) urlFetch.getUrl(urlString + "/robots.txt");

		String robots = urlFetch.getContent(urlConn);
		return robots;
	}

}
