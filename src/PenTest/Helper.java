package PenTest;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.HashMap;

public class Helper {

	static void show(String content)
	{
		System.out.println(content);
	}

	static String getHash(String content)
	{
		byte[] contentBytes = null;
		contentBytes = content.getBytes();

		MessageDigest md = null;
		try {
			md = MessageDigest.getInstance("MD5");
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		byte[] hashBytes = md.digest(contentBytes);

		StringBuffer stringBuffer = new StringBuffer();
		for (int i = 0; i < hashBytes.length; i++) {
			stringBuffer.append(Integer.toString((hashBytes[i] & 0xff) + 0x100, 16)
					.substring(1));
		}

		return stringBuffer.toString();
	}

	static ArrayList<String> getUniqueList(ArrayList<String> list)
	{
		/*	extract unique list from given array list	*/
		HashMap<String, String> uniqueMap = new HashMap<String, String>();

		ArrayList<String> output = new ArrayList<String>();

		if(list.isEmpty())
		{
			return output;
		}

		for(int i = 0; i < list.size(); i++)
		{

			if(!uniqueMap.containsKey(getHash(list.get(i))))
			{
				/*	put the target url into the array list	*/
				uniqueMap.put(getHash(list.get(i)), list.get(i));


				/*	add the result into the output	*/
				output.add(list.get(i));
			}
			else
			{

			}

		}

		return output;

	}

	static String sanitizeUrl(String urlString, String urlParent)
	{
		urlString = urlString.replace("\\", "");

		String protocol = "http";

		/*	pattern to check for URL without protocol e.g //{REQUEST_URI}	*/
		String r1 = "^//.+?$";
		/*	pattern to check for URL started with "." e.g .{RELATIVE_URI}	*/
		String r2 = "^\\.[^\\.]+?.+$";
		/*	pattern to check e.g. /{RELATIVE_URI} 	*/
		String r3 = "^/.+?$";
		/*	URL with iterative e.g. ../{RELATIVE_URI}	*/
		String r4 = "^\\.\\./.+?$";
		/*	URL with domain name e.g {REQUEST_URI}	*/
		String r5 = "^[^/\\.\\s].+?$";

		/*	GET parameter e.g ?{key=value}	*/
		String r6 = "^\\?[^\\?]+?$";

		/*	hash value	*/
		String r7 = "^#[^#]+?$";

		/*	hash value	*/
		String r8 = "^://.+?$";


		/*	correct pattern for URL e.g. http(s)://{REQUEST_URI}	*/
		String rDefault = "^http(s)*://.+?$";

		if(urlString.matches(rDefault))
		{
			/*	do nothing	*/
		}
		else if(urlString.matches(r1))
		{
			urlString = protocol + ":" + urlString;
		}
		else if(urlString.matches(r2))
		{
			urlString = protocol + "://" + urlString.replaceAll("^(\\.)", "");
		}
		else if(urlString.matches(r3))
		{
			urlString = urlParent + urlString;
		}
		else if(urlString.matches(r4))
		{
			urlString = urlParent + "/" + urlString;
		}
		else if(urlString.matches(r5))
		{
			urlString = protocol + "://" + urlString;
		}			
		else if(urlString.matches(r6))
		{
			urlString = urlParent + urlString;
		}			
		else if(urlString.matches(r7))
		{
			urlString = urlParent + urlString;
		}			
		else if(urlString.matches(r8))
		{
			urlString = protocol + urlString;
		}			
		else
		{

		}

		return urlString;
	}

	static String sanitizeUrl(String urlString)
	{

		return sanitizeUrl(urlString, "http://localhost");
	}
}
