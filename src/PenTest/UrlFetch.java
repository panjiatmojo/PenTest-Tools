package PenTest;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.net.ssl.HttpsURLConnection;

public class UrlFetch {

	public String content = "";
	public HashMap<String, Object> header = null;

	static HashMap<String, Object> get(String urlString)
	{
		return get(urlString, "http://localhost");
	}

	static HashMap<String, Object> get(String urlString, String urlParent)
	{
		HashMap<String, Object> result = new HashMap<String, Object>();

		UrlFetch urlFetch = new UrlFetch();

		/*	get the url	*/
		if(urlString.matches("^https://"))
		{
			HttpsURLConnection urlConn = (HttpsURLConnection) urlFetch.getUrlSecure(urlString, urlParent);

			try {
				result.put("responseCode",urlConn.getResponseCode());
			} catch (IOException e) {
				ErrorHandler.write(e);
			}

			/*	get the content	*/
			String content = urlFetch.getContent(urlConn);
			result.put("content", content);

			/*	get the header	*/
			HashMap<String, Object> header = urlFetch.getHeader(urlConn);
			result.put("header", header);
		}
		else
		{
			HttpURLConnection urlConn = (HttpURLConnection) urlFetch.getUrl(urlString, urlParent);

			try {
				result.put("responseCode",urlConn.getResponseCode());
			} catch (IOException e) {
				ErrorHandler.write(e);
			}

			/*	get the content	*/
			String content = urlFetch.getContent(urlConn);
			result.put("content", content);

			/*	get the header	*/
			HashMap<String, Object> header = urlFetch.getHeader(urlConn);
			result.put("header", header);
		}

		return result;		
	}

	public HttpURLConnection getUrl(String urlString, String urlParent)
	{
		URL url = null;

		try {

			/*	sanitize the target url first	*/
			urlString = Helper.sanitizeUrl(urlString, urlParent);

			Helper.show("Fetch: " + urlString);

			/*	create url object	*/
			url = new URL(urlString);
		} catch (MalformedURLException e) {
			ErrorHandler.write(e);
		}

		HttpURLConnection urlConn = null;
		try {
			urlConn = (HttpURLConnection) url.openConnection();

		} catch (Exception e) {
			ErrorHandler.write(e);
		}

		/*	add the user agent to the request	*/
		urlConn.addRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36");

		return urlConn;
	}

	public HttpsURLConnection getUrlSecure(String urlString, String urlParent)
	{
		URL url = null;

		try {

			/*	sanitize the target url first	*/
			urlString = Helper.sanitizeUrl(urlString, urlParent);

			Helper.show("Fetch: " + urlString);

			/*	create url object	*/
			url = new URL(urlString);
		} catch (MalformedURLException e) {
			ErrorHandler.write(e);
		}

		HttpsURLConnection urlConn = null;
		try {
			urlConn = (HttpsURLConnection) url.openConnection();
		} catch (Exception e) {
			ErrorHandler.write(e);
		}

		/*	add the user agent to the request	*/
		urlConn.addRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36");

		return urlConn;
	}

	public URLConnection getUrl(String urlString)
	{
		return getUrl(urlString, "http://localhost");
	}

	public URLConnection getUrlSecure(String urlString)
	{
		return getUrlSecure(urlString, "http://localhost");
	}

	public String getContent(HttpURLConnection urlConn)
	{
		/*	get the URL Connection content	*/
		String output = "";

		/*	get the url content	*/
		try (BufferedReader reader = new BufferedReader(new InputStreamReader(urlConn.getInputStream(), "UTF-8"))) {

			/*	read all line within the response	*/
			for (String line; (line = reader.readLine()) != null;) {
				output += line;
			}
		}
		catch(Exception e)
		{

			HttpURLConnection connection = (HttpURLConnection) urlConn;
			try {
				System.out.println(connection.getResponseMessage());
			} catch (IOException e1) {

			}
			ErrorHandler.write(e);
		}

		return output;
	}

	public HashMap<String, Object> getHeader(URLConnection urlConn)
	{
		/*	get the header information	*/
		HashMap<String, Object> output = new HashMap<String, Object>();

		Map<String, List<String>> headerFields = urlConn.getHeaderFields();

		for(Map.Entry<String,List<String>> entry : headerFields.entrySet())
		{
			output.put(entry.getKey(), entry.getValue());
		}

		return output;
	}
}
